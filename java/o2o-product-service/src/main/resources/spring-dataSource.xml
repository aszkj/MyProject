<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">


    <!-- JNDI方式配置数据源,需要在tomcat中配置数据源，并在config.properties文件中增加jndiname -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> 
        <property name="jndiName" value="${jndiName}"></property> </bean> -->

    <!-- 配置数据源，使用阿里巴巴的druid数据源(也可以使用c3p0或者dbcp，druid的性能更好点 ) -->
    <bean id="dataSource" name="dataSource"
        class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
        destroy-method="close">
        <!-- 配置数据库连接参数,druid会根据url自动识别dialect和driverClass无须配置 -->
        <property name="url" value="${jdbc_url}" />
        <property name="username" value="${jdbc_username}" />
        <property name="password" value="${jdbc_password}" />


        <!-- 初始化来连接大小 -->
        <property name="initialSize" value="10" />
        <!-- 连接池中使用的最大连接数量，在druid中相当于maxPoolSize -->
        <property name="maxActive" value="100" />
        <!-- 连接池中最大的空闲连接数 -->
        <property name="maxIdle" value="10" />
        <!-- 连接池中最小的空闲连接数，在druid中相当于minPoolSize -->
        <property name="minIdle" value="5" />
        <!-- 获取连接的最大等待时间，单位毫秒 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />


        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
            value="20" />

        <!-- 打开druid的监控和统计功能 并通过日志文件记录sql -->
        <property name="filters" value="mergeStat,log4j" />
    </bean>

    <!-- mybatis相关配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />

        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 自动扫描model目录中的映射xml文件，省去了在config中手工配置 -->
        <property name="mapperLocations"
            value="classpath:com/yilidi/o2o/product/dao/mapping/**/*.xml" />
        <!-- 为指定包下的类指定别名，省去了编写全限定名 ，默认使用类名 -->
        <property name="typeAliasesPackage" value="com.yilidi.o2o.product" />

    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.yilidi.o2o.product.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>

    <!-- 配置事物 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>


    <!-- 使用注解的方式来配置事物 -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->

    <!-- 拦截器方式配置事物 -->
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="load*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="list*" propagation="SUPPORTS" />
            <tx:method name="check*" propagation="SUPPORTS" />

            <tx:method name="*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="transactionPointcut"
            expression="execution(* com.yilidi.o2o.product.service..*Service.*(..))
            			or execution(* com.yilidi.o2o.product.proxy.impl.crossdomain.*Impl.*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut"
            advice-ref="transactionAdvice" />
    </aop:config>
    
    
    <!-- 使用拦截器来配置数据库查询时的redis缓存的使用 -->
	<bean id="dbCacheMethodInterceptor"
		class="com.yilidi.o2o.core.cache.DBCacheInterceptor"></bean>
	<aop:config>
		<!-- 切入点 -->
		<aop:pointcut id="cachePoint"
			expression="execution(* com.yilidi.o2o.product.dao.*.*(..))" />
		<!-- 在该切入点使用自定义拦截器 -->
		<aop:advisor pointcut-ref="cachePoint" advice-ref="dbCacheMethodInterceptor" />
	</aop:config> 
	
	<!-- 使用拦截器来拦截跨域主事务Service方法，以便对跨域事务统一处理 -->
	<!--
	<bean id="crossDomainTransactionMainInterceptor"
		class="com.yilidi.o2o.interceptor.CrossDomainTransactionMainInterceptor"></bean>
	<aop:config>
		<aop:pointcut id="mainInterceptorPoint"
			expression="execution(* com.yilidi.o2o.product.service.crossdomain.*Service.*(..))" />
		<aop:advisor pointcut-ref="mainInterceptorPoint" advice-ref="crossDomainTransactionMainInterceptor" />
	</aop:config> 
	-->
	
	<!-- 使用拦截器来拦截跨域子事务Service方法，以便对跨域事务统一处理 -->
	<!--
	<bean id="crossDomainTransactionSubInterceptor"
		class="com.yilidi.o2o.interceptor.CrossDomainTransactionSubInterceptor"></bean>
	<aop:config>
		<aop:pointcut id="subInterceptorPoint"
			expression="execution(* com.yilidi.o2o.user.proxy.crossdomain.*Service.*(..))
			or execution(* com.yilidi.o2o.system.proxy.crossdomain.*Service.*(..))
			or execution(* com.yilidi.o2o.order.proxy.crossdomain.*Service.*(..))" />
		<aop:advisor pointcut-ref="subInterceptorPoint" advice-ref="crossDomainTransactionSubInterceptor" />
	</aop:config> 
	-->

    <!-- 配置druid监控spring jdbc -->

    <!-- <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"> 
        </bean> <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" 
        scope="prototype"> <property name="patterns"> <list> <value>com.yilidi.product.service.*</value> 
        </list> </property> </bean> <aop:config> <aop:advisor advice-ref="druid-stat-interceptor" 
        pointcut-ref="druid-stat-pointcut" /> </aop:config> -->

</beans>