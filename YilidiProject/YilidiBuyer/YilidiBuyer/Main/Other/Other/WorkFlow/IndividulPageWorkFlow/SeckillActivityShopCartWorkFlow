!秒杀活动购物车修改workflow
//主要是在之前的购物车上修改，修改围绕的一个关键点==>决定加入购物车和购物车中已经存在的某个商品是不是同一个商品不再是仅由商品id决定，而还由秒杀活动id决定（当然以后还有更多其它的活动）所以这里是一个变化点，也是主要的变化点，所以应将这部分抽出，即，确定两个商品是否是同一个商品，作为x模块

//修改目的，id相同的两个商品，一个在活动页内，一个在活动页外，后加入的将前面的替换，所以说，同一个id商品，在购物车中仍然只会存在一个，所以你对已经存在购物车中的商品删除，选中，减操作流程和之前应该是一样的，所以关键的修改点是控制加入，

//修改点，加入购物车，之前根据商品id去取商品数量，加减商品接口，同步购物车接口，确认购物车接口，加减发通知

x->确定两个商品是否是同一个商品
a->原来的某个商品加入购物车流程
c->加减时发通知的字典中加入商品模型
e->加减UI收到加减通知原来的处理流程
d->加减UI收到通知后，若通知字典里面存在商品模型（按道理都应该要发送商品模型的，但是删除没有传，因为删除一直用的是id,修改面太大所以暂时删除发通知不传商品模型）==>根据该商品模型和当前加减UI的商品模型执行x==>是同一个==>e
                                                                           ==>否==>将加减标志置为减，数量置为0，
                                     ==>不存在商品模型==>e


1=================>某商品(modelWillAddedToShopCart)加入购物车流程

根据该商品id取出购物车中该商品对应的modelInShopCart，

model为空(说明该商品第一次加入)==>a
                        否则==>x==>是==>a
                               ==>否==>b:以新加入的商品modelWillAddedToShopCart为主，替换modelInShopCart，并将其个数置为1，并且重新计算购物车总数量总价格，总数量是加上1并减去被替换的商品的数量，总价格是加上商品的总价格减去被替换商品的总价格(被替换的商品的的价格看是否是秒杀商品，若是则取秒杀价，不是则取orderPrice)==>a==>c==>d
/**
*  修改的，每加入一个商品，之前都采用orderPrice,现在是变化的，提出来，若是从购物车加的，一律采用orderPrice,若是从购物车外面加的，则视情况而定，比如从秒杀页加的，则是以秒杀价计算，被替换的商品的价格也是如此
*/
2=================>修改之前的根据商品id取出商品数量流程

将之前的方法入口参数修改为商品模型，==>x==>是同一个商品，返回数量
                                 ==>否，返回0

3=================>修改之前的几个接口入口参数，加入活动id
加减商品接口，同步购物车接口，确认购物车接口




